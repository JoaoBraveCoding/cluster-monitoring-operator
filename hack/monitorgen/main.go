// Copyright 2021 The Cluster Monitoring Operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bytes"
	"flag"
	"log"
	"os"

	"github.com/openshift/cluster-monitoring-operator/hack/monitorgen/internal/profiles"
	"github.com/openshift/cluster-monitoring-operator/pkg/manifests"
)

var (
	path                   *string
	minimalMetricsFilePath *string
)

func init() {
	path = flag.String("path", "./assets/control-plane/service-monitor-kubelet.yaml", "(Required) Path to ServiceMonitor that we want to generate collection profiles")
	minimalMetricsFilePath = flag.String("minimal-metrics-file", "", "(Optional) Path to a file containing a list of metrics that will be kept in the minimal collection profile")
}

func main() {
	flag.Parse()

	f, err := os.ReadFile(*path)
	if err != nil {
		log.Fatalf("failed to read asset %v: %e", *path, err)
	}

	m, err := manifests.NewServiceMonitor(bytes.NewReader(f))
	if err != nil {
		log.Fatalf("failed to convert to service monitor: %e", err)
	}

	// The script is only intended to be used with resources of kind ServiceMonitor
	if m.Kind != "ServiceMonitor" {
		return
	}

	// Don't process ServiceMonitors that were generated by this tool as they will be overwritten
	if val, ok := m.ObjectMeta.Annotations[manifests.CollectionProfileLabel]; ok && val != "full" {
		return
	}

	profiles.GenerateCollectionProfileMinimal(*m, *path, *minimalMetricsFilePath)
}
